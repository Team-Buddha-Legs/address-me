import type { PersonalizedSummary } from "@/types";

export function generateTextReport(
  summary: PersonalizedSummary,
  reportId: string,
): string {
  const lines: string[] = [];

  // Header
  lines.push("=".repeat(60));
  lines.push("YOUR PERSONALIZED POLICY SUMMARY");
  lines.push("=".repeat(60));
  lines.push("");
  lines.push(
    `Generated on: ${summary.generatedAt.toLocaleDateString("en-HK", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    })}`,
  );
  lines.push(`Report ID: ${reportId}`);
  lines.push("");

  // Overall Score
  lines.push("-".repeat(40));
  lines.push("OVERALL POLICY RELEVANCE SCORE");
  lines.push("-".repeat(40));
  lines.push(`${summary.overallScore}%`);
  lines.push("");

  // Policy Areas
  lines.push("-".repeat(40));
  lines.push("RELEVANT POLICY AREAS");
  lines.push("-".repeat(40));
  lines.push("");

  summary.relevantAreas.forEach((area, index) => {
    lines.push(`${index + 1}. ${area.title.toUpperCase()}`);
    lines.push(`   Relevance Score: ${area.relevanceScore}%`);
    lines.push(`   Impact Level: ${area.impact.toUpperCase()}`);
    lines.push("");
    lines.push(`   Summary:`);
    lines.push(`   ${area.summary}`);
    lines.push("");
    lines.push(`   Details:`);
    lines.push(`   ${area.details}`);
    lines.push("");

    if (area.actionItems.length > 0) {
      lines.push(`   Action Items:`);
      area.actionItems.forEach((item, itemIndex) => {
        lines.push(`   â€¢ ${item}`);
      });
      lines.push("");
    }

    if (index < summary.relevantAreas.length - 1) {
      lines.push("   " + "-".repeat(35));
      lines.push("");
    }
  });

  // Major Updates
  lines.push("-".repeat(40));
  lines.push("MAJOR CITY UPDATES");
  lines.push("-".repeat(40));
  lines.push("");

  summary.majorUpdates.forEach((update, index) => {
    lines.push(`${index + 1}. ${update.title.toUpperCase()}`);
    lines.push(`   Timeline: ${update.timeline}`);
    lines.push(`   Impact Level: ${update.impact.toUpperCase()}`);
    lines.push("");
    lines.push(`   Description:`);
    lines.push(`   ${update.description}`);
    lines.push("");
    lines.push(`   Relevance to You:`);
    lines.push(`   ${update.relevanceToUser}`);
    lines.push("");

    if (index < summary.majorUpdates.length - 1) {
      lines.push("   " + "-".repeat(35));
      lines.push("");
    }
  });

  // Recommendations
  lines.push("-".repeat(40));
  lines.push("PERSONALIZED RECOMMENDATIONS");
  lines.push("-".repeat(40));
  lines.push("");

  summary.recommendations.forEach((rec, index) => {
    lines.push(`${index + 1}. ${rec.title.toUpperCase()}`);
    lines.push(`   Priority: ${rec.priority.toUpperCase()}`);
    lines.push(`   Category: ${rec.category.toUpperCase()}`);
    lines.push("");
    lines.push(`   Description:`);
    lines.push(`   ${rec.description}`);
    lines.push("");

    if (rec.actionSteps.length > 0) {
      lines.push(`   Action Steps:`);
      rec.actionSteps.forEach((step, stepIndex) => {
        lines.push(`   ${stepIndex + 1}. ${step}`);
      });
      lines.push("");
    }

    if (index < summary.recommendations.length - 1) {
      lines.push("   " + "-".repeat(35));
      lines.push("");
    }
  });

  // Footer
  lines.push("=".repeat(60));
  lines.push("IMPORTANT NOTICE");
  lines.push("=".repeat(60));
  lines.push("");
  lines.push("This personalized summary is based on your profile information");
  lines.push("and the Hong Kong Policy Address 2025-2026.");
  lines.push("");
  lines.push("For the most up-to-date information, please refer to official");
  lines.push("government sources and policy documents.");
  lines.push("");
  lines.push("Generated by Address Me - Hong Kong Policy Summary Tool");
  lines.push("");

  return lines.join("\n");
}

export function generateTextFileName(
  summary: PersonalizedSummary,
  reportId: string,
): string {
  const date = summary.generatedAt.toISOString().split("T")[0];
  return `policy-summary-${reportId}-${date}.txt`;
}

export function downloadTextReport(
  summary: PersonalizedSummary,
  reportId: string,
): void {
  try {
    const textContent = generateTextReport(summary, reportId);
    const fileName = generateTextFileName(summary, reportId);

    // Create blob and download link
    const blob = new Blob([textContent], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = fileName;

    // Trigger download
    document.body.appendChild(link);
    link.click();

    // Cleanup
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error("Error downloading text report:", error);
    throw error;
  }
}
